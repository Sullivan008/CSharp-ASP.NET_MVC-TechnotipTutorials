@{
    ViewBag.Title = "Index";
}

<!--Egy sorban 4 képet jelenítünk meg egymás mellett, melyek reszponzívan jelennek meg.
    Egy sorban a col-md-x összege nem haladhatja meg a 12-őt. Összesen 12 kell hogy legyen
    az összege, ennek megfelelően fogja feldarabolni a képernyőt-->
<div class="panel panel-body">
    <div class="col-md-3">
        <img class="img-responsive" src="~/Content/Images/index.jpg" />
    </div>
    <div class="col-md-3">
        <img class="img-responsive" src="~/Content/Images/index.jpg" />
    </div>
    <div class="col-md-3">
        <img class="img-responsive" src="~/Content/Images/index.jpg" />
    </div>
    <div class="col-md-3">
        <img class="img-responsive" src="~/Content/Images/index.jpg" />
    </div>
</div>

<div class="panel panel-body">
    <!--Oldalsó menüsáv elkészítése.-->
    <div class="col-md-3">
        @{ Html.RenderAction("SideMenu", "Example");}
    </div>

    <!--Content elkészítése-->
    <!--A kép megjelenítéséhez szükséges elemek megjelenítése-->
    <div class="col-md-9" align="center">

        <h3 align="center">Kérem válasza ki a feltöltendő fájlt: </h3><br />

        <!--Tallózás gomb elkészítése-->
        <div class="btn btn-primary">
            <input type="file" id="imageBrowse" />
        </div>
        <br /><br />

        <!--Panel elkészítése. Tartalmazza a kiválasztott képet, majd a
            hozzá tartozó információkat-->
        <div class="row">
            <div class="col-sm-4 col-sm-offset-4 text-center">

                <!--Objektum, amely tartalmazni fogja a kiválasztott képet, majd
                    a képhez tartozó információkat-->
                <div id="imgPreview" class="thumbnail" style="display:none">

                    <!--Objektum amely tartalmazni fogja a kiválasztott képet-->
                    <img class="img-responsive" id="targetImg" />

                    <!--Kép alatti rész, amely tartalmazni fogja a képhez tartozó
                        információkat, illetve az elvetéshez szükséges információkat-->
                    <div class="caption">

                        <!--Elvetés gomb definiálása-->
                        <a href="#" onclick="ClearPreview()">
                            A fájl eltávoltása
                            <i class="glyphicon glyphicon-trash"></i>
                        </a>
                        <!--Információkat tartalmazó objektum definiálása-->
                        <p id="description"></p>
                    </div>

                    <a href="#" class="btn btn-success" onclick="UploadImage()">
                        Kép feltöltése
                        <i class="glyphicon glyphicon-upload"></i>
                    </a>
                </div>

                <!--Mező, amelybe a kép elérési útvonalát illesztjük-->
                <input type="text" class="form-control" id="imageURLTextBox" />

                <a href="#" class="btn btn-primary btn-block" onclick="UploadImage()">
                    Kép feltöltése URL használatával
                    <i class="glyphicon glyphicon-upload"></i>
                </a>
            </div>
        </div>

        <!--Panel elkészítése. Tartalmazza a legutóbb feltöltött képet-->
        <div class="row">
            <div id="lastestUploadImageField" class="col-sm-4 col-sm-offset-4 text-center" style="display:none">

                <!--Felirat beszúrása-->
                <h3 align="center">A legutóbb feltöltött fájl: </h3><br />

                <!--DIV elkészítése, amelyikben  meg fogjuk jeleníteni, a
                    legutóbbi feltöltött képet-->
                <div id="latestUploadImage" class="thumbnail">
                    <img src="~/Content/InternetSlowdown_Day.gif" height="20" width="20" style="display:none" id="loadingGIF"/>
                </div>
            </div>
        </div>
    </div>
</div>

<!--SCRIPT-ek definiálása-->
<script src="~/Scripts/jquery-1.10.2.min.js"></script>

<!--A kép megjelenítéséhez, illetve az elvetéséhez szükséges
    SCRIPT-ek definiálása-->
<script>
    /// Ha a DOM Document minden eleme betöltődött, akkor fusson le a függvény.
    $(document).ready(function ()
    {
        /// A tallózás gombra kattintva fut le a change esemény (Ha kiválasztottunk,
        /// egy fájl-t, vagy ha bezártuk a tallózás modális ablakot)
        $("#imageBrowse").change(function ()
        {
            /// Eltároljuk a kiválasztott fájl-t
            var selectedFile = this.files;

            /// Ha a selectedFile nem null értékű, és a 0. eleme sem az,
            /// azaz volt kiválasztott fájl, akkor...
            if (selectedFile && selectedFile[0])
            {
                /// Beolvassuk a kiválsztott fájlok tömb 0. elemét, azaz az
                /// egyetlen egy kiválasztott feltöltendő fájlt
                ReadImage(selectedFile[0]);
            }
        })
    })

    /// A Beolvasásért és a kép megjelenítéséért, illetve a képhez tartozó adatok
    /// megjelenítéséért felelős metódus
    var ReadImage = function (currentFile)
    {
        /// Reader illetve Image objektumok definiálása
        var reader = new FileReader;
        var image = new Image;

        /// Fájl tartalmának beolvasása, az eredmény attribútum tartalmazza
        /// az adatokat, mint URL- t
        reader.readAsDataURL(currentFile);

        /// Akkor fut le amikor az egyik terheléses esemény aktiválódik. Jelen
        /// esetben a ReadAsDataURL fájl betöltésére fog meghívódni
        reader.onload = function (file)
        {
            /// Image objektumba betöltjük a paraméterben kapott readAsDataURL által
            /// beolvasott tartalmat
            image.src = file.target.result;

            /// Akkor fut le amikor az egyik terheléses esemény aktiválódik. Jelen
            /// esetben az src fájl beolvasására fog meghívódni
            image.onload = function ()
            {
                /// Adatok kinyerése az src-nek átadott adattartalom alapján
                /// Magasság, Szélesség, Fájl típusa, Mérete
                var height  = this.height;
                var width   = this.width;
                var type    = currentFile.type;
                var size    = ~~(currentFile.size / 1024) + "KB";

                /// Feltöltjük az objektumot, az Image objektumban található képpel
                $("#targetImg").attr('src', file.target.result);

                /// Feltöltjük az objektumot a képről található információkkal
                $("#description").text("Méret: " + size + ", (" + height + "x " + width + ")");

                /// Az adatokkal feltöltött objektumok megjelenítése a felhasználónak
                $("#imgPreview").show();
            }
        }
    }

    /// A "Fájl feltöltése" gombra kattintva hívódik meg az esemény
    /// Feltölti a felhasználó által kiválasztott fájlt az adatbázisba
    var UploadImage = function ()
    {
        /// Fájl kiolvasása az "imageBrowse" objektumból. Annak is a 0. elemét, mivel
        /// feltételezhetjük hogy a több fájl választási lehetősége be van kapcsolva,
        /// de ugyan úgy csak 1 fájlt szeretnénk feltölteni
        var file = $("#imageBrowse").get(0).files;

        /// URL Kiolvasása a FORM-on található imageURLTextBox mezőből. Ezen található
        /// a feltöltendő kép
        var imageURL = $("#imageURLTextBox").val();

        /// Egy FormData objektumon keresztül fogom átküldeni a kiválasztott fájlt
        var data = new FormData;
        data.append("ImageFile", file[0]);
        data.append("ImageURL", imageURL);

        /// Loading GIF megjelenítése
        $("#loadingGIF").show();

        /// Megjelenítjük azt a Blokkot, amely tartalmazni fogja a feltöltött képhez tartozó
        /// információkat
        $("#lastestUploadImageField").show();

        /// AJAX - Asyncron JavaScript And XML
        $.ajax({
            type: "POST",                           /// Kérés típusa
            url: "/Home/ImageUpload",               /// Hol érhető el (Controller/MethodName)
            data: data,                             /// A feltöltendő fájl
            contentType: false,                     /// Az adattípus amit küldünk (Kikapcsolva!)
            processData: false,                     /// Az adatok ne kerüljenek feldolgozásra!
            success: function (lastUploadedImageID) /// Ha skeresen lefutott az AJAX kérés
            {
                /// Vizsgálat, hogy sikeresen lefutott-e a feltöltés. Ha 0 az érték, akkor nem!
                if (lastUploadedImageID != 0)
                {
                    /// Ha sikeres volt az AJAX kérés, a LoadingGIF-et eltüntetjük, hisz csak a képet
                    /// szeretnénk már megjeleníteni
                    $("#loadingGIF").hide();

                    /// Töröljük a meglévő mezőket (Kiválasztott kép, hozzá tartozó adatok, stb...)
                    ClearPreview();
                
                    /// A legutóbb feltöltött képet töröljük a DIV tag-ünkből (Így mindig csak a tényleges
                    /// legutóbbi feltöltött kép fog megjelenni)
                    $("#latestUploadImage img:last-child").remove()

                    /// DIV-tag-hez hozzá adjuk azt az IMG tag-et ami tartalmazni fogja a legutóbb feltöltött
                    /// képet (A kép beolvasása már az adatbázisból amely a /Controller/Action meghatározásával
                    /// történik)
                    $("#latestUploadImage").append('<img src="/Home/ShowLastUploadedImage?lastUploadedImageID='
                        + lastUploadedImageID + '" class="img-responsive thumbnail"/>');
                }
                else
                {
                    /// Üzenet a felhasználó számára
                    alert("HIBA! A fájlfeltöltés során! Hibás elérési útvonal!");

                    /// Loading GIF elrejtése
                    $("#loadingGIF").hide();

                    /// Blokk eltűntetése, amely a legutóbb feltöltött képet tartalmazza
                    $("#lastestUploadImageField").hide();

                    /// Ha esetleg volt már sikeresen feltöltött kép, kitöröljük azt, hogy ne
                    /// töltődjön be ismét!
                    $("#latestUploadImage img:last-child").remove()
                }
            }
        })
    }

    /// Az "Adatok eltávolítása" gombra kattintva hívódik meg az esemény
    /// Kitörli az információs objektumokat, majd eltünteti azt a felhasználó szeme elől
    var ClearPreview = function ()
    {
        $("#imageBrowse").val('');
        $("#description").text('');
        $("#imgPreview").hide();
    }
</script>